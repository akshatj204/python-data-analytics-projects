# -*- coding: utf-8 -*-
"""Aerofit Business Case.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XmSIYv7NhPmQfF61Tlp0-mfj1-sG6iZY
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

aerofit_data = pd.read_csv('aerofit_treadmill.txt')
aerofit_data

type(aerofit_data)

"""## Basic Structure of the Data"""

aerofit_data.shape

aerofit_data.describe()

aerofit_data.dtypes

aerofit_data.info()

aerofit_data

# Check for Null data
aerofit_data.isnull().value_counts()

aerofit_data['Product'].value_counts().reset_index()

age_df = aerofit_data['Age'].value_counts().reset_index()

age_df.sort_values(by='Age')

plt.boxplot([age_df['Age'], age_df['count']], labels=['Age', 'Count'])
plt.show()

"""## Treadmill Products"""

prod_df = aerofit_data['Product'].value_counts().reset_index()
prod_df

plt.pie(data = prod_df, x = prod_df['count'], labels = ['KP281', 'KP481', 'KP781'], autopct='%1.0f%%')
plt.show()

"""## Treadmill Products and Gender"""

prod_gen = aerofit_data[['Product', 'Gender']]
prod_gen

prod_gen_grouped = prod_gen.groupby(['Product', 'Gender']).value_counts().reset_index()
prod_gen_grouped

sns.scatterplot(data = prod_gen_grouped, x = prod_gen_grouped['Product'], y = prod_gen_grouped['count'] ,hue = prod_gen_grouped['Gender'])
plt.show()

# For Product KP281 and KP781: Customers are mostly Male, for Product KP481: its mixed.

"""## Treadmill Products, Gender and Age"""

prod_gen_age = aerofit_data[['Product', 'Gender', 'Age']]

gen_age_grouped = prod_gen_age.groupby(['Product', 'Gender', 'Age']).value_counts().reset_index()
gen_age_grouped

## Creating Age Bins

age_bins = [17,25,35,50]
age_labels = ['Young Adults', 'Adults', 'Middle-Aged Adults']

aerofit_data['age_group'] = pd.cut(aerofit_data['Age'], bins = age_bins, labels = age_labels)
aerofit_data['age_group']

aerofit_data['age_group'].value_counts()

aerofit_data

prod_gen_age = aerofit_data[['Product', 'Gender', 'age_group']]
prod_gen_age

age_gen_grouped = prod_gen_age.groupby(['Product', 'Gender']).value_counts().reset_index()
age_gen_grouped

age_gen_grouped.info()

age_gen_grouped['Combined'] = age_gen_grouped['Gender'].astype(str)+'/'+age_gen_grouped['age_group'].astype(str)
age_gen_grouped

plt.figure(figsize=(10,5))
sns.barplot(data = age_gen_grouped, x = age_gen_grouped['Product'], y = age_gen_grouped['count'], hue = age_gen_grouped['Combined'])
plt.ylabel('Sales in Units')
plt.title('Aerofit Treadmill Product Sales')
plt.show()

# For KP781 - Major audience is Male/Young + Male/Adults
# For KP481 and KP281 - Young Adults as well as Adults in Male as well as Females are significant customers

"""## Treadmill and Marital Status"""

prod_marital_df = aerofit_data[['Product', 'MaritalStatus']]
prod_marital_df

prod_marital_grouped = prod_marital_df.groupby('Product').value_counts().reset_index()
prod_marital_grouped

plt.figure(figsize = (10,5))
sns.barplot(data = prod_marital_grouped, x =prod_marital_grouped['Product'], y = prod_marital_grouped['count'], hue = prod_marital_grouped['MaritalStatus'], palette={'Single': 'green', 'Partnered': 'red'})
plt.ylabel('Sales in Units')
plt.show()

## same analysis in scatterplot

plt.figure(figsize = (10,5))
sns.scatterplot(data = prod_marital_grouped, x =prod_marital_grouped['Product'], y = prod_marital_grouped['count'], hue = prod_marital_grouped['MaritalStatus'], palette = 'pastel')
plt.ylabel('Sales in Units')
plt.show()

# Better sales to Partners

"""## Treadmill and Education"""

prod_edu = aerofit_data[['Product', 'Education']]
prod_edu

prod_edu_agg = prod_edu.groupby('Product')['Education'].agg(['min', 'max', 'mean']).reset_index()

prod_edu_agg

prod_edu_grouped = prod_edu.groupby('Product').value_counts().reset_index()
prod_edu_grouped

edu_pivot_table = prod_edu_grouped.pivot_table(index = 'Product', columns = 'Education', values = 'count')
edu_pivot_table.reset_index(inplace = True)

edu_pivot_table.isnull()

edu_pivot_table.fillna(0, inplace = True)
edu_pivot_table

edu_pivot_table.columns

edu_pivot_table_subset = edu_pivot_table[[12,13,14,15,16,18,20,21]]

edu_pivot_table_subset

sns.heatmap(edu_pivot_table_subset, cmap='YlGnBu', annot=True)
plt.yticks(ticks = [0,1,2],labels = ['KP281', 'KP481', 'KP781'])
plt.show()

# For KP281 and KP481, 14-16 years of education is the major cutomer base. But for KP781 (seeming to be more expensive), 16-18 years of education seems to be the right customer-base.

"""## Treadmill and Income"""

aerofit_data.describe()

# Finding dispersion in Income

sns.boxplot(aerofit_data['Income'])
plt.show()

# There are multiple instances where customer's income is beyond the IQR, i.e. 1.5 times tbe 75 percentile.

# Creating bins out of Income

income_bins = [aerofit_data['Income'].min(), 35000, 50000, 65000,aerofit_data['Income'].max()]

income_labels = ['Low', 'Middle', 'High', 'Super-High']

aerofit_data['income_cat'] = pd.cut(aerofit_data['Income'], bins = income_bins, labels = income_labels, include_lowest=True)
aerofit_data['income_cat']

aerofit_data

prod_income = aerofit_data[['Product', 'income_cat']]
prod_income

prod_income_grouped = prod_income.groupby('Product').value_counts().reset_index()
prod_income_grouped

sns.lineplot(data=prod_income_grouped, x = prod_income_grouped['Product'], y = prod_income_grouped['count'], hue = prod_income_grouped['income_cat'])
plt.show()

# Clearly for Product KP781, customers with income in brackets of "Super-High" and "High" are the only customer base. Customers with income in Low and mIddle incomes generally perfer KP281 and KP481 products.

"""## Treadmill and Fitness Level"""

prod_fitness = aerofit_data[['Product', 'Fitness']]
prod_fitness

prod_fitness_grouped = prod_fitness.groupby('Product').value_counts().reset_index()
prod_fitness_grouped

sns.lineplot(data = prod_fitness_grouped, x = prod_fitness_grouped['Product'], y =prod_fitness_grouped['count'], hue = prod_fitness_grouped['Fitness'])
plt.show()

# CUstomers who are extremely particular about their fitness plus have higher income plus married plus a man is most likely to purchase a KP781.
# Customers with Fitness Level of 3 plus low/middle income are most like to purchase a KP281/KP481. They could be reasonably distributed in gender as well as marriage.



"""## Two-way Contingency Tables"""

#1 Treadmill Product and Gender

"""### 1) Treadmill Product and Gender"""

cross_tab_1 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['Gender'], margins=True)
cross_tab_1

cross_tab_1_subset = cross_tab_1[['Female', 'Male']]
cross_tab_1_subset

marginal_prob_1 = cross_tab_1.div(cross_tab_1.loc['All', 'All'])
marginal_prob_1 = round(marginal_prob_1,2)
marginal_prob_1

marginal_prob_1_subset = marginal_prob_1[['Female', 'Male']]
marginal_prob_1_subset

marginal_prob_1_subset.plot(kind = 'bar', stacked = 'True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Gender')
plt.show()

cond_prob_1 = cross_tab_1.div(cross_tab_1['All'], axis = 0)
cond_prob_1

cond_prob_1_subset = cond_prob_1[['Female', 'Male']]
cond_prob_1_subset

cond_prob_1_subset.plot(kind = 'bar', stacked = 'True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Gender')
plt.show()

"""### 2) Treadmill and Age"""

cross_tab_2 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['age_group'], margins=True)
cross_tab_2

cross_tab_2_subset = cross_tab_2[['Young Adults', 'Adults', 'Middle-Aged Adults']]
cross_tab_2_subset

marginal_prob_2 = cross_tab_2.div(cross_tab_1.loc['All', 'All'])
marginal_prob_2 = round(marginal_prob_2,2)
marginal_prob_2

marginal_prob_2_subset = marginal_prob_2[['Young Adults', 'Adults', 'Middle-Aged Adults']]

marginal_prob_2_subset.plot(kind = 'bar', stacked = True)
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Age Group')
plt.show()

cond_prob_2 = cross_tab_2.div(cross_tab_2['All'], axis = 0)
cond_prob_2

cond_prob_2_subset = cond_prob_2[['Young Adults', 'Adults', 'Middle-Aged Adults']]
cond_prob_2_subset

plt.figure(figsize=(12,5))
cond_prob_2_subset.plot(kind = 'bar', stacked = True)
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Age Group')
plt.show()

"""### 3) Treadmill and Age/Gender"""

age_gen_grouped

cross_tab_3 = pd.crosstab(index = age_gen_grouped['Product'], columns = age_gen_grouped['Combined'], margins=True, values = age_gen_grouped['count'], aggfunc=sum)
cross_tab_3

marginal_prob_3 = cross_tab_3.div(cross_tab_3.loc['All', 'All'])
marginal_prob_3 = round(marginal_prob_3,2)
marginal_prob_3

marginal_prob_3.columns

marginal_prob_3_subset = marginal_prob_3[['Female/Adults', 'Female/Middle-Aged Adults','Female/Young Adults', 'Male/Adults','Male/Middle-Aged Adults', 'Male/Young Adults']]
marginal_prob_3_subset

marginal_prob_3_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Gender and Age Group')
plt.show()

cond_prob_3 = cross_tab_3.div(cross_tab_3['All'], axis = 0)
cond_prob_3

cond_prob_3_subset = cond_prob_3.drop(columns = 'All')
cond_prob_3_subset

cond_prob_3_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Gender and Age Group')
plt.show()

"""### 4) Treadmill and Marital Status"""

cross_tab_4 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['MaritalStatus'], margins=True)
cross_tab_4

marginal_prob_4 = cross_tab_4.div(cross_tab_4.loc['All', 'All'])
marginal_prob_4 = round(marginal_prob_4,2)
marginal_prob_4

marginal_prob_4_subset = marginal_prob_4.drop(columns = 'All')

marginal_prob_4_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Marital Status')
plt.show()

cond_prob_4 = cross_tab_4.div(cross_tab_4['All'], axis = 0)
cond_prob_4

cond_prob_4_subset = cond_prob_4.drop(columns = 'All')

cond_prob_4_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Marital Status')
plt.show()

"""### 5) Treadmill and Education"""

cross_tab_5 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['Education'], margins = True)
cross_tab_5

marginal_prob_5 = cross_tab_5.div(cross_tab_5.loc['All', 'All'])
marginal_prob_5 = round(marginal_prob_5,2)
marginal_prob_5

marginal_prob_5_subset = marginal_prob_5.drop(columns = 'All')

marginal_prob_5_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Education')
plt.show()

cond_prob_5 = cross_tab_5.div(cross_tab_5['All'], axis = 0)
cond_prob_5

cond_prob_5_subset = cond_prob_5.drop(columns = 'All')

plt.figure(figsize  = (10,10))
cond_prob_5_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Education')
plt.show()

"""### 6) Treadmill and Income"""

cross_tab_6 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['income_cat'], margins = True)
cross_tab_6

marginal_prob_6 = cross_tab_6.div(cross_tab_6.loc['All', 'All'])
marginal_prob_6 = round(marginal_prob_6,2)
marginal_prob_6

marginal_prob_6_subset = marginal_prob_6.drop(columns = 'All')

marginal_prob_6_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Income-Level')
plt.show()

cond_prob_6 = cross_tab_6.div(cross_tab_6['All'], axis = 0)
cond_prob_6

cond_prob_6_subset =  cond_prob_6.drop(columns = 'All')

plt.figure(figsize  = (10,10))
cond_prob_6_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Income Level')
plt.show()

"""### Treadmill and Fitness Level"""

cross_tab_7 = pd.crosstab(index = aerofit_data['Product'], columns = aerofit_data['Fitness'], margins = True)
cross_tab_7

marginal_prob_7 = cross_tab_7.div(cross_tab_7.loc['All', 'All'])
marginal_prob_7 = round(marginal_prob_7,2)
marginal_prob_7

marginal_prob_7_subset = marginal_prob_7.drop(columns ='All')

marginal_prob_7_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Fitness-Level')
plt.show()

cond_prob_7 = cross_tab_7.div(cross_tab_7['All'], axis = 0)
cond_prob_7

cond_prob_7_subset = cond_prob_7.drop(columns = 'All')

plt.figure(figsize  = (10,10))
cond_prob_7_subset.plot(kind = 'bar', stacked='True')
plt.ylabel('Sales Probability')
plt.title('Stacked Bar Chart - Product Sold by Fitness-Level')
plt.show()